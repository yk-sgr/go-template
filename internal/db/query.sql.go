// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.24.0
// source: query.sql

package db

import (
	"context"

	"github.com/google/uuid"
	"github.com/jackc/pgx/v5/pgtype"
)

const addUserToOrganization = `-- name: AddUserToOrganization :exec
INSERT INTO organization_members(organization_id, user_id)
VALUES ($1, $2)
`

type AddUserToOrganizationParams struct {
	OrganizationID uuid.UUID
	UserID         uuid.UUID
}

func (q *Queries) AddUserToOrganization(ctx context.Context, arg AddUserToOrganizationParams) error {
	_, err := q.db.Exec(ctx, addUserToOrganization, arg.OrganizationID, arg.UserID)
	return err
}

const createOrganization = `-- name: CreateOrganization :one
INSERT INTO organizations(name, owner_id)
VALUES ($1, $2)
RETURNING id, name, plan, owner_id, created_at
`

type CreateOrganizationParams struct {
	Name    string
	OwnerID uuid.UUID
}

func (q *Queries) CreateOrganization(ctx context.Context, arg CreateOrganizationParams) (Organization, error) {
	row := q.db.QueryRow(ctx, createOrganization, arg.Name, arg.OwnerID)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Plan,
		&i.OwnerID,
		&i.CreatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users(name, email, password)
VALUES ($1, $2, $3)
RETURNING id, name, email, password, verified, last_seen_at, created_at
`

type CreateUserParams struct {
	Name     string
	Email    string
	Password string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser, arg.Name, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Verified,
		&i.LastSeenAt,
		&i.CreatedAt,
	)
	return i, err
}

const getOrganizationByID = `-- name: GetOrganizationByID :one
SELECT id, name, plan, owner_id, created_at
FROM organizations
WHERE id = $1
`

func (q *Queries) GetOrganizationByID(ctx context.Context, id uuid.UUID) (Organization, error) {
	row := q.db.QueryRow(ctx, getOrganizationByID, id)
	var i Organization
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Plan,
		&i.OwnerID,
		&i.CreatedAt,
	)
	return i, err
}

const getOrganizationMembers = `-- name: GetOrganizationMembers :many
SELECT u.id, u.name, u.email, u.password, u.verified, u.last_seen_at, u.created_at, om.role
FROM users u
JOIN organization_members om ON u.id = om.user_id
WHERE om.organization_id = $1
`

type GetOrganizationMembersRow struct {
	ID         uuid.UUID
	Name       string
	Email      string
	Password   string
	Verified   bool
	LastSeenAt pgtype.Timestamptz
	CreatedAt  pgtype.Timestamptz
	Role       OrganizationMemberRole
}

func (q *Queries) GetOrganizationMembers(ctx context.Context, organizationID uuid.UUID) ([]GetOrganizationMembersRow, error) {
	rows, err := q.db.Query(ctx, getOrganizationMembers, organizationID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetOrganizationMembersRow
	for rows.Next() {
		var i GetOrganizationMembersRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.Verified,
			&i.LastSeenAt,
			&i.CreatedAt,
			&i.Role,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrganizationsByOwnerID = `-- name: GetOrganizationsByOwnerID :many
SELECT id, name, plan, owner_id, created_at
FROM organizations
WHERE owner_id = $1
`

func (q *Queries) GetOrganizationsByOwnerID(ctx context.Context, ownerID uuid.UUID) ([]Organization, error) {
	rows, err := q.db.Query(ctx, getOrganizationsByOwnerID, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Plan,
			&i.OwnerID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrganizationsByUserID = `-- name: GetOrganizationsByUserID :many
SELECT org.id, org.name, org.plan, org.owner_id, org.created_at
FROM organizations org
JOIN organization_members om ON om.organization_id = org.id
WHERE om.user_id = $1
`

func (q *Queries) GetOrganizationsByUserID(ctx context.Context, userID uuid.UUID) ([]Organization, error) {
	rows, err := q.db.Query(ctx, getOrganizationsByUserID, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Organization
	for rows.Next() {
		var i Organization
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Plan,
			&i.OwnerID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, name, email, password, verified, last_seen_at, created_at
FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRow(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Verified,
		&i.LastSeenAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, name, email, password, verified, last_seen_at, created_at
FROM users
WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRow(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Verified,
		&i.LastSeenAt,
		&i.CreatedAt,
	)
	return i, err
}

const removeUserFromOrganization = `-- name: RemoveUserFromOrganization :exec
DELETE FROM organization_members
WHERE user_id = $1 AND organization_id = $2
`

type RemoveUserFromOrganizationParams struct {
	UserID         uuid.UUID
	OrganizationID uuid.UUID
}

func (q *Queries) RemoveUserFromOrganization(ctx context.Context, arg RemoveUserFromOrganizationParams) error {
	_, err := q.db.Exec(ctx, removeUserFromOrganization, arg.UserID, arg.OrganizationID)
	return err
}

const updateOrganizationMemberRole = `-- name: UpdateOrganizationMemberRole :exec
UPDATE organization_members
SET role = $3
WHERE user_id = $1 AND organization_id = $2
`

type UpdateOrganizationMemberRoleParams struct {
	UserID         uuid.UUID
	OrganizationID uuid.UUID
	Role           OrganizationMemberRole
}

func (q *Queries) UpdateOrganizationMemberRole(ctx context.Context, arg UpdateOrganizationMemberRoleParams) error {
	_, err := q.db.Exec(ctx, updateOrganizationMemberRole, arg.UserID, arg.OrganizationID, arg.Role)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET name = $2, email = $3, password = $4
WHERE id = $1
`

type UpdateUserParams struct {
	ID       uuid.UUID
	Name     string
	Email    string
	Password string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
	)
	return err
}
